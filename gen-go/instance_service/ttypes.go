// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package instance_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type PortTypes int64

const (
	PortTypes_NovaVMPort    PortTypes = 0
	PortTypes_NameSpacePort PortTypes = 1
)

func (p PortTypes) String() string {
	switch p {
	case PortTypes_NovaVMPort:
		return "NovaVMPort"
	case PortTypes_NameSpacePort:
		return "NameSpacePort"
	}
	return "<UNSET>"
}

func PortTypesFromString(s string) (PortTypes, error) {
	switch s {
	case "NovaVMPort":
		return PortTypes_NovaVMPort, nil
	case "NameSpacePort":
		return PortTypes_NameSpacePort, nil
	}
	return PortTypes(0), fmt.Errorf("not a valid PortTypes string")
}

func PortTypesPtr(v PortTypes) *PortTypes { return &v }

func (p PortTypes) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PortTypes) UnmarshalText(text []byte) error {
	q, err := PortTypesFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Tuuid []int16

func TuuidPtr(v Tuuid) *Tuuid { return &v }

type PortList []*Port

func PortListPtr(v PortList) *PortList { return &v }

type SubnetList []*Subnet

func SubnetListPtr(v SubnetList) *SubnetList { return &v }

type VirtualGatewayRequestList []*VirtualGatewayRequest

func VirtualGatewayRequestListPtr(v VirtualGatewayRequestList) *VirtualGatewayRequestList { return &v }

// Attributes:
//  - PortID
//  - InstanceID
//  - TapName
//  - IPAddress
//  - VnID
//  - MacAddress
//  - DisplayName
//  - Hostname
//  - Host
//  - VMProjectID
//  - VlanID
//  - PortType
//  - Ip6Address
//  - IsolatedVlanID
type Port struct {
	PortID         Tuuid   `thrift:"port_id,1,required" json:"port_id"`
	InstanceID     Tuuid   `thrift:"instance_id,2,required" json:"instance_id"`
	TapName        string  `thrift:"tap_name,3,required" json:"tap_name"`
	IPAddress      string  `thrift:"ip_address,4,required" json:"ip_address"`
	VnID           Tuuid   `thrift:"vn_id,5,required" json:"vn_id"`
	MacAddress     string  `thrift:"mac_address,6,required" json:"mac_address"`
	DisplayName    *string `thrift:"display_name,7" json:"display_name,omitempty"`
	Hostname       *string `thrift:"hostname,8" json:"hostname,omitempty"`
	Host           *string `thrift:"host,9" json:"host,omitempty"`
	VMProjectID    Tuuid   `thrift:"vm_project_id,10" json:"vm_project_id,omitempty"`
	VlanID         *int16  `thrift:"vlan_id,11" json:"vlan_id,omitempty"`
	PortType       *int16  `thrift:"port_type,12" json:"port_type,omitempty"`
	Ip6Address     *string `thrift:"ip6_address,13" json:"ip6_address,omitempty"`
	IsolatedVlanID *int16  `thrift:"isolated_vlan_id,14" json:"isolated_vlan_id,omitempty"`
}

func NewPort() *Port {
	return &Port{}
}

func (p *Port) GetPortID() Tuuid {
	return p.PortID
}

func (p *Port) GetInstanceID() Tuuid {
	return p.InstanceID
}

func (p *Port) GetTapName() string {
	return p.TapName
}

func (p *Port) GetIPAddress() string {
	return p.IPAddress
}

func (p *Port) GetVnID() Tuuid {
	return p.VnID
}

func (p *Port) GetMacAddress() string {
	return p.MacAddress
}

var Port_DisplayName_DEFAULT string

func (p *Port) GetDisplayName() string {
	if !p.IsSetDisplayName() {
		return Port_DisplayName_DEFAULT
	}
	return *p.DisplayName
}

var Port_Hostname_DEFAULT string

func (p *Port) GetHostname() string {
	if !p.IsSetHostname() {
		return Port_Hostname_DEFAULT
	}
	return *p.Hostname
}

var Port_Host_DEFAULT string

func (p *Port) GetHost() string {
	if !p.IsSetHost() {
		return Port_Host_DEFAULT
	}
	return *p.Host
}

var Port_VMProjectID_DEFAULT Tuuid

func (p *Port) GetVMProjectID() Tuuid {
	return p.VMProjectID
}

var Port_VlanID_DEFAULT int16

func (p *Port) GetVlanID() int16 {
	if !p.IsSetVlanID() {
		return Port_VlanID_DEFAULT
	}
	return *p.VlanID
}

var Port_PortType_DEFAULT int16

func (p *Port) GetPortType() int16 {
	if !p.IsSetPortType() {
		return Port_PortType_DEFAULT
	}
	return *p.PortType
}

var Port_Ip6Address_DEFAULT string

func (p *Port) GetIp6Address() string {
	if !p.IsSetIp6Address() {
		return Port_Ip6Address_DEFAULT
	}
	return *p.Ip6Address
}

var Port_IsolatedVlanID_DEFAULT int16

func (p *Port) GetIsolatedVlanID() int16 {
	if !p.IsSetIsolatedVlanID() {
		return Port_IsolatedVlanID_DEFAULT
	}
	return *p.IsolatedVlanID
}
func (p *Port) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *Port) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *Port) IsSetHost() bool {
	return p.Host != nil
}

func (p *Port) IsSetVMProjectID() bool {
	return p.VMProjectID != nil
}

func (p *Port) IsSetVlanID() bool {
	return p.VlanID != nil
}

func (p *Port) IsSetPortType() bool {
	return p.PortType != nil
}

func (p *Port) IsSetIp6Address() bool {
	return p.Ip6Address != nil
}

func (p *Port) IsSetIsolatedVlanID() bool {
	return p.IsolatedVlanID != nil
}

func (p *Port) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPortID bool = false
	var issetInstanceID bool = false
	var issetTapName bool = false
	var issetIPAddress bool = false
	var issetVnID bool = false
	var issetMacAddress bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPortID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetInstanceID = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTapName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetIPAddress = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetVnID = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetMacAddress = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPortID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PortID is not set"))
	}
	if !issetInstanceID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InstanceID is not set"))
	}
	if !issetTapName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TapName is not set"))
	}
	if !issetIPAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IPAddress is not set"))
	}
	if !issetVnID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VnID is not set"))
	}
	if !issetMacAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MacAddress is not set"))
	}
	return nil
}

func (p *Port) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(Tuuid, 0, size)
	p.PortID = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.PortID = append(p.PortID, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Port) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(Tuuid, 0, size)
	p.InstanceID = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.InstanceID = append(p.InstanceID, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Port) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TapName = v
	}
	return nil
}

func (p *Port) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IPAddress = v
	}
	return nil
}

func (p *Port) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(Tuuid, 0, size)
	p.VnID = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.VnID = append(p.VnID, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Port) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MacAddress = v
	}
	return nil
}

func (p *Port) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DisplayName = &v
	}
	return nil
}

func (p *Port) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *Port) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Host = &v
	}
	return nil
}

func (p *Port) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(Tuuid, 0, size)
	p.VMProjectID = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.VMProjectID = append(p.VMProjectID, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Port) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.VlanID = &v
	}
	return nil
}

func (p *Port) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PortType = &v
	}
	return nil
}

func (p *Port) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Ip6Address = &v
	}
	return nil
}

func (p *Port) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.IsolatedVlanID = &v
	}
	return nil
}

func (p *Port) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Port"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Port) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port_id", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:port_id: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I16, len(p.PortID)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PortID {
		if err := oprot.WriteI16(int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:port_id: ", p), err)
	}
	return err
}

func (p *Port) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("instance_id", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:instance_id: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I16, len(p.InstanceID)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.InstanceID {
		if err := oprot.WriteI16(int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:instance_id: ", p), err)
	}
	return err
}

func (p *Port) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tap_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tap_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TapName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tap_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tap_name: ", p), err)
	}
	return err
}

func (p *Port) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip_address", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip_address: ", p), err)
	}
	if err := oprot.WriteString(string(p.IPAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip_address (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip_address: ", p), err)
	}
	return err
}

func (p *Port) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vn_id", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vn_id: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I16, len(p.VnID)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VnID {
		if err := oprot.WriteI16(int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vn_id: ", p), err)
	}
	return err
}

func (p *Port) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mac_address", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mac_address: ", p), err)
	}
	if err := oprot.WriteString(string(p.MacAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mac_address (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mac_address: ", p), err)
	}
	return err
}

func (p *Port) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("display_name", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:display_name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DisplayName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.display_name (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:display_name: ", p), err)
		}
	}
	return err
}

func (p *Port) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:hostname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostname (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:hostname: ", p), err)
		}
	}
	return err
}

func (p *Port) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetHost() {
		if err := oprot.WriteFieldBegin("host", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:host: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Host)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.host (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:host: ", p), err)
		}
	}
	return err
}

func (p *Port) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetVMProjectID() {
		if err := oprot.WriteFieldBegin("vm_project_id", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vm_project_id: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I16, len(p.VMProjectID)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VMProjectID {
			if err := oprot.WriteI16(int16(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vm_project_id: ", p), err)
		}
	}
	return err
}

func (p *Port) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetVlanID() {
		if err := oprot.WriteFieldBegin("vlan_id", thrift.I16, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:vlan_id: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.VlanID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vlan_id (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:vlan_id: ", p), err)
		}
	}
	return err
}

func (p *Port) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPortType() {
		if err := oprot.WriteFieldBegin("port_type", thrift.I16, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:port_type: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.PortType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.port_type (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:port_type: ", p), err)
		}
	}
	return err
}

func (p *Port) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIp6Address() {
		if err := oprot.WriteFieldBegin("ip6_address", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:ip6_address: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Ip6Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ip6_address (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:ip6_address: ", p), err)
		}
	}
	return err
}

func (p *Port) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsolatedVlanID() {
		if err := oprot.WriteFieldBegin("isolated_vlan_id", thrift.I16, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:isolated_vlan_id: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.IsolatedVlanID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isolated_vlan_id (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:isolated_vlan_id: ", p), err)
		}
	}
	return err
}

func (p *Port) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Port(%+v)", *p)
}

// Attributes:
//  - Prefix
//  - Plen
type Subnet struct {
	Prefix string `thrift:"prefix,1,required" json:"prefix"`
	Plen   int16  `thrift:"plen,2,required" json:"plen"`
}

func NewSubnet() *Subnet {
	return &Subnet{}
}

func (p *Subnet) GetPrefix() string {
	return p.Prefix
}

func (p *Subnet) GetPlen() int16 {
	return p.Plen
}
func (p *Subnet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPrefix bool = false
	var issetPlen bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPrefix = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetPlen = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPrefix {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Prefix is not set"))
	}
	if !issetPlen {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Plen is not set"))
	}
	return nil
}

func (p *Subnet) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Prefix = v
	}
	return nil
}

func (p *Subnet) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Plen = v
	}
	return nil
}

func (p *Subnet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Subnet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Subnet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("prefix", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prefix: ", p), err)
	}
	if err := oprot.WriteString(string(p.Prefix)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.prefix (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prefix: ", p), err)
	}
	return err
}

func (p *Subnet) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("plen", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plen: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Plen)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.plen (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plen: ", p), err)
	}
	return err
}

func (p *Subnet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Subnet(%+v)", *p)
}

// Attributes:
//  - InterfaceName
//  - RoutingInstance
//  - Subnets
//  - Routes
type VirtualGatewayRequest struct {
	InterfaceName   string     `thrift:"interface_name,1,required" json:"interface_name"`
	RoutingInstance string     `thrift:"routing_instance,2,required" json:"routing_instance"`
	Subnets         SubnetList `thrift:"subnets,3,required" json:"subnets"`
	Routes          SubnetList `thrift:"routes,4" json:"routes,omitempty"`
}

func NewVirtualGatewayRequest() *VirtualGatewayRequest {
	return &VirtualGatewayRequest{}
}

func (p *VirtualGatewayRequest) GetInterfaceName() string {
	return p.InterfaceName
}

func (p *VirtualGatewayRequest) GetRoutingInstance() string {
	return p.RoutingInstance
}

func (p *VirtualGatewayRequest) GetSubnets() SubnetList {
	return p.Subnets
}

var VirtualGatewayRequest_Routes_DEFAULT SubnetList

func (p *VirtualGatewayRequest) GetRoutes() SubnetList {
	return p.Routes
}
func (p *VirtualGatewayRequest) IsSetRoutes() bool {
	return p.Routes != nil
}

func (p *VirtualGatewayRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetInterfaceName bool = false
	var issetRoutingInstance bool = false
	var issetSubnets bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetInterfaceName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRoutingInstance = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetSubnets = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetInterfaceName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InterfaceName is not set"))
	}
	if !issetRoutingInstance {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoutingInstance is not set"))
	}
	if !issetSubnets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Subnets is not set"))
	}
	return nil
}

func (p *VirtualGatewayRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.InterfaceName = v
	}
	return nil
}

func (p *VirtualGatewayRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoutingInstance = v
	}
	return nil
}

func (p *VirtualGatewayRequest) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(SubnetList, 0, size)
	p.Subnets = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &Subnet{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Subnets = append(p.Subnets, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VirtualGatewayRequest) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(SubnetList, 0, size)
	p.Routes = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &Subnet{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.Routes = append(p.Routes, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VirtualGatewayRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VirtualGatewayRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VirtualGatewayRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interface_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:interface_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.InterfaceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interface_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:interface_name: ", p), err)
	}
	return err
}

func (p *VirtualGatewayRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("routing_instance", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:routing_instance: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoutingInstance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.routing_instance (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:routing_instance: ", p), err)
	}
	return err
}

func (p *VirtualGatewayRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subnets", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subnets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Subnets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Subnets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subnets: ", p), err)
	}
	return err
}

func (p *VirtualGatewayRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoutes() {
		if err := oprot.WriteFieldBegin("routes", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:routes: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Routes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Routes {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:routes: ", p), err)
		}
	}
	return err
}

func (p *VirtualGatewayRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VirtualGatewayRequest(%+v)", *p)
}
