// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package instance_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type InstanceService interface {
	// Parameters:
	//  - PortList
	AddPort(port_list PortList) (r bool, err error)
	KeepAliveCheck() (r bool, err error)
	Connect() (r bool, err error)
	// Parameters:
	//  - PortID
	DeletePort(port_id Tuuid) (r bool, err error)
	// Parameters:
	//  - VgwList
	AddVirtualGateway(vgw_list VirtualGatewayRequestList) (r bool, err error)
	// Parameters:
	//  - VgwList
	DeleteVirtualGateway(vgw_list []string) (r bool, err error)
	ConnectForVirtualGateway() (r bool, err error)
	// Parameters:
	//  - Timeout
	AuditTimerForVirtualGateway(timeout int32) (r bool, err error)
	// Parameters:
	//  - SrcIP
	//  - DstIP
	//  - VrfName
	TunnelNHEntryAdd(src_ip string, dst_ip string, vrf_name string) (r bool, err error)
	// Parameters:
	//  - SrcIP
	//  - DstIP
	//  - VrfName
	TunnelNHEntryDelete(src_ip string, dst_ip string, vrf_name string) (r bool, err error)
	// Parameters:
	//  - IPAddress
	//  - GwIP
	//  - VrfName
	//  - Label
	RouteEntryAdd(ip_address string, gw_ip string, vrf_name string, label string) (r bool, err error)
	// Parameters:
	//  - IPAddress
	//  - VrfName
	RouteEntryDelete(ip_address string, vrf_name string) (r bool, err error)
	// Parameters:
	//  - IPAddress
	//  - VrfName
	AddHostRoute(ip_address string, vrf_name string) (r bool, err error)
	// Parameters:
	//  - IPAddress
	//  - IntfUUID
	//  - VrfName
	//  - Label
	AddLocalVmRoute(ip_address string, intf_uuid string, vrf_name string, label string) (r bool, err error)
	// Parameters:
	//  - IPAddress
	//  - GwIP
	//  - VrfName
	//  - Label
	AddRemoteVmRoute(ip_address string, gw_ip string, vrf_name string, label string) (r bool, err error)
	// Parameters:
	//  - VrfName
	CreateVrf(vrf_name string) (r bool, err error)
}

type InstanceServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewInstanceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *InstanceServiceClient {
	return &InstanceServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewInstanceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *InstanceServiceClient {
	return &InstanceServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - PortList
func (p *InstanceServiceClient) AddPort(port_list PortList) (r bool, err error) {
	if err = p.sendAddPort(port_list); err != nil {
		return
	}
	return p.recvAddPort()
}

func (p *InstanceServiceClient) sendAddPort(port_list PortList) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AddPort", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceAddPortArgs{
		PortList: port_list,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvAddPort() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AddPort" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddPort failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddPort failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddPort failed: invalid message type")
		return
	}
	result := InstanceServiceAddPortResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *InstanceServiceClient) KeepAliveCheck() (r bool, err error) {
	if err = p.sendKeepAliveCheck(); err != nil {
		return
	}
	return p.recvKeepAliveCheck()
}

func (p *InstanceServiceClient) sendKeepAliveCheck() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("KeepAliveCheck", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceKeepAliveCheckArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvKeepAliveCheck() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "KeepAliveCheck" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "KeepAliveCheck failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "KeepAliveCheck failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "KeepAliveCheck failed: invalid message type")
		return
	}
	result := InstanceServiceKeepAliveCheckResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *InstanceServiceClient) Connect() (r bool, err error) {
	if err = p.sendConnect(); err != nil {
		return
	}
	return p.recvConnect()
}

func (p *InstanceServiceClient) sendConnect() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Connect", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceConnectArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvConnect() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Connect" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Connect failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Connect failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Connect failed: invalid message type")
		return
	}
	result := InstanceServiceConnectResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PortID
func (p *InstanceServiceClient) DeletePort(port_id Tuuid) (r bool, err error) {
	if err = p.sendDeletePort(port_id); err != nil {
		return
	}
	return p.recvDeletePort()
}

func (p *InstanceServiceClient) sendDeletePort(port_id Tuuid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("DeletePort", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceDeletePortArgs{
		PortID: port_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvDeletePort() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "DeletePort" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DeletePort failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DeletePort failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DeletePort failed: invalid message type")
		return
	}
	result := InstanceServiceDeletePortResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - VgwList
func (p *InstanceServiceClient) AddVirtualGateway(vgw_list VirtualGatewayRequestList) (r bool, err error) {
	if err = p.sendAddVirtualGateway(vgw_list); err != nil {
		return
	}
	return p.recvAddVirtualGateway()
}

func (p *InstanceServiceClient) sendAddVirtualGateway(vgw_list VirtualGatewayRequestList) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AddVirtualGateway", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceAddVirtualGatewayArgs{
		VgwList: vgw_list,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvAddVirtualGateway() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AddVirtualGateway" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddVirtualGateway failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddVirtualGateway failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddVirtualGateway failed: invalid message type")
		return
	}
	result := InstanceServiceAddVirtualGatewayResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - VgwList
func (p *InstanceServiceClient) DeleteVirtualGateway(vgw_list []string) (r bool, err error) {
	if err = p.sendDeleteVirtualGateway(vgw_list); err != nil {
		return
	}
	return p.recvDeleteVirtualGateway()
}

func (p *InstanceServiceClient) sendDeleteVirtualGateway(vgw_list []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("DeleteVirtualGateway", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceDeleteVirtualGatewayArgs{
		VgwList: vgw_list,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvDeleteVirtualGateway() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "DeleteVirtualGateway" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DeleteVirtualGateway failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DeleteVirtualGateway failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DeleteVirtualGateway failed: invalid message type")
		return
	}
	result := InstanceServiceDeleteVirtualGatewayResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *InstanceServiceClient) ConnectForVirtualGateway() (r bool, err error) {
	if err = p.sendConnectForVirtualGateway(); err != nil {
		return
	}
	return p.recvConnectForVirtualGateway()
}

func (p *InstanceServiceClient) sendConnectForVirtualGateway() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ConnectForVirtualGateway", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceConnectForVirtualGatewayArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvConnectForVirtualGateway() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ConnectForVirtualGateway" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ConnectForVirtualGateway failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ConnectForVirtualGateway failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ConnectForVirtualGateway failed: invalid message type")
		return
	}
	result := InstanceServiceConnectForVirtualGatewayResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Timeout
func (p *InstanceServiceClient) AuditTimerForVirtualGateway(timeout int32) (r bool, err error) {
	if err = p.sendAuditTimerForVirtualGateway(timeout); err != nil {
		return
	}
	return p.recvAuditTimerForVirtualGateway()
}

func (p *InstanceServiceClient) sendAuditTimerForVirtualGateway(timeout int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AuditTimerForVirtualGateway", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceAuditTimerForVirtualGatewayArgs{
		Timeout: timeout,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvAuditTimerForVirtualGateway() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AuditTimerForVirtualGateway" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AuditTimerForVirtualGateway failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AuditTimerForVirtualGateway failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AuditTimerForVirtualGateway failed: invalid message type")
		return
	}
	result := InstanceServiceAuditTimerForVirtualGatewayResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SrcIP
//  - DstIP
//  - VrfName
func (p *InstanceServiceClient) TunnelNHEntryAdd(src_ip string, dst_ip string, vrf_name string) (r bool, err error) {
	if err = p.sendTunnelNHEntryAdd(src_ip, dst_ip, vrf_name); err != nil {
		return
	}
	return p.recvTunnelNHEntryAdd()
}

func (p *InstanceServiceClient) sendTunnelNHEntryAdd(src_ip string, dst_ip string, vrf_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("TunnelNHEntryAdd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceTunnelNHEntryAddArgs{
		SrcIP:   src_ip,
		DstIP:   dst_ip,
		VrfName: vrf_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvTunnelNHEntryAdd() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "TunnelNHEntryAdd" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TunnelNHEntryAdd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TunnelNHEntryAdd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TunnelNHEntryAdd failed: invalid message type")
		return
	}
	result := InstanceServiceTunnelNHEntryAddResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SrcIP
//  - DstIP
//  - VrfName
func (p *InstanceServiceClient) TunnelNHEntryDelete(src_ip string, dst_ip string, vrf_name string) (r bool, err error) {
	if err = p.sendTunnelNHEntryDelete(src_ip, dst_ip, vrf_name); err != nil {
		return
	}
	return p.recvTunnelNHEntryDelete()
}

func (p *InstanceServiceClient) sendTunnelNHEntryDelete(src_ip string, dst_ip string, vrf_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("TunnelNHEntryDelete", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceTunnelNHEntryDeleteArgs{
		SrcIP:   src_ip,
		DstIP:   dst_ip,
		VrfName: vrf_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvTunnelNHEntryDelete() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "TunnelNHEntryDelete" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TunnelNHEntryDelete failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TunnelNHEntryDelete failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TunnelNHEntryDelete failed: invalid message type")
		return
	}
	result := InstanceServiceTunnelNHEntryDeleteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IPAddress
//  - GwIP
//  - VrfName
//  - Label
func (p *InstanceServiceClient) RouteEntryAdd(ip_address string, gw_ip string, vrf_name string, label string) (r bool, err error) {
	if err = p.sendRouteEntryAdd(ip_address, gw_ip, vrf_name, label); err != nil {
		return
	}
	return p.recvRouteEntryAdd()
}

func (p *InstanceServiceClient) sendRouteEntryAdd(ip_address string, gw_ip string, vrf_name string, label string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RouteEntryAdd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceRouteEntryAddArgs{
		IPAddress: ip_address,
		GwIP:      gw_ip,
		VrfName:   vrf_name,
		Label:     label,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvRouteEntryAdd() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RouteEntryAdd" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RouteEntryAdd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RouteEntryAdd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RouteEntryAdd failed: invalid message type")
		return
	}
	result := InstanceServiceRouteEntryAddResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IPAddress
//  - VrfName
func (p *InstanceServiceClient) RouteEntryDelete(ip_address string, vrf_name string) (r bool, err error) {
	if err = p.sendRouteEntryDelete(ip_address, vrf_name); err != nil {
		return
	}
	return p.recvRouteEntryDelete()
}

func (p *InstanceServiceClient) sendRouteEntryDelete(ip_address string, vrf_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RouteEntryDelete", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceRouteEntryDeleteArgs{
		IPAddress: ip_address,
		VrfName:   vrf_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvRouteEntryDelete() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RouteEntryDelete" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RouteEntryDelete failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RouteEntryDelete failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RouteEntryDelete failed: invalid message type")
		return
	}
	result := InstanceServiceRouteEntryDeleteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IPAddress
//  - VrfName
func (p *InstanceServiceClient) AddHostRoute(ip_address string, vrf_name string) (r bool, err error) {
	if err = p.sendAddHostRoute(ip_address, vrf_name); err != nil {
		return
	}
	return p.recvAddHostRoute()
}

func (p *InstanceServiceClient) sendAddHostRoute(ip_address string, vrf_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AddHostRoute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceAddHostRouteArgs{
		IPAddress: ip_address,
		VrfName:   vrf_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvAddHostRoute() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AddHostRoute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddHostRoute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddHostRoute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddHostRoute failed: invalid message type")
		return
	}
	result := InstanceServiceAddHostRouteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IPAddress
//  - IntfUUID
//  - VrfName
//  - Label
func (p *InstanceServiceClient) AddLocalVmRoute(ip_address string, intf_uuid string, vrf_name string, label string) (r bool, err error) {
	if err = p.sendAddLocalVmRoute(ip_address, intf_uuid, vrf_name, label); err != nil {
		return
	}
	return p.recvAddLocalVmRoute()
}

func (p *InstanceServiceClient) sendAddLocalVmRoute(ip_address string, intf_uuid string, vrf_name string, label string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AddLocalVmRoute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceAddLocalVmRouteArgs{
		IPAddress: ip_address,
		IntfUUID:  intf_uuid,
		VrfName:   vrf_name,
		Label:     label,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvAddLocalVmRoute() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AddLocalVmRoute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddLocalVmRoute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddLocalVmRoute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddLocalVmRoute failed: invalid message type")
		return
	}
	result := InstanceServiceAddLocalVmRouteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IPAddress
//  - GwIP
//  - VrfName
//  - Label
func (p *InstanceServiceClient) AddRemoteVmRoute(ip_address string, gw_ip string, vrf_name string, label string) (r bool, err error) {
	if err = p.sendAddRemoteVmRoute(ip_address, gw_ip, vrf_name, label); err != nil {
		return
	}
	return p.recvAddRemoteVmRoute()
}

func (p *InstanceServiceClient) sendAddRemoteVmRoute(ip_address string, gw_ip string, vrf_name string, label string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AddRemoteVmRoute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceAddRemoteVmRouteArgs{
		IPAddress: ip_address,
		GwIP:      gw_ip,
		VrfName:   vrf_name,
		Label:     label,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvAddRemoteVmRoute() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AddRemoteVmRoute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddRemoteVmRoute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddRemoteVmRoute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddRemoteVmRoute failed: invalid message type")
		return
	}
	result := InstanceServiceAddRemoteVmRouteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - VrfName
func (p *InstanceServiceClient) CreateVrf(vrf_name string) (r bool, err error) {
	if err = p.sendCreateVrf(vrf_name); err != nil {
		return
	}
	return p.recvCreateVrf()
}

func (p *InstanceServiceClient) sendCreateVrf(vrf_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CreateVrf", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InstanceServiceCreateVrfArgs{
		VrfName: vrf_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *InstanceServiceClient) recvCreateVrf() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CreateVrf" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CreateVrf failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateVrf failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CreateVrf failed: invalid message type")
		return
	}
	result := InstanceServiceCreateVrfResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type InstanceServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      InstanceService
}

func (p *InstanceServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *InstanceServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *InstanceServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewInstanceServiceProcessor(handler InstanceService) *InstanceServiceProcessor {

	self38 := &InstanceServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self38.processorMap["AddPort"] = &instanceServiceProcessorAddPort{handler: handler}
	self38.processorMap["KeepAliveCheck"] = &instanceServiceProcessorKeepAliveCheck{handler: handler}
	self38.processorMap["Connect"] = &instanceServiceProcessorConnect{handler: handler}
	self38.processorMap["DeletePort"] = &instanceServiceProcessorDeletePort{handler: handler}
	self38.processorMap["AddVirtualGateway"] = &instanceServiceProcessorAddVirtualGateway{handler: handler}
	self38.processorMap["DeleteVirtualGateway"] = &instanceServiceProcessorDeleteVirtualGateway{handler: handler}
	self38.processorMap["ConnectForVirtualGateway"] = &instanceServiceProcessorConnectForVirtualGateway{handler: handler}
	self38.processorMap["AuditTimerForVirtualGateway"] = &instanceServiceProcessorAuditTimerForVirtualGateway{handler: handler}
	self38.processorMap["TunnelNHEntryAdd"] = &instanceServiceProcessorTunnelNHEntryAdd{handler: handler}
	self38.processorMap["TunnelNHEntryDelete"] = &instanceServiceProcessorTunnelNHEntryDelete{handler: handler}
	self38.processorMap["RouteEntryAdd"] = &instanceServiceProcessorRouteEntryAdd{handler: handler}
	self38.processorMap["RouteEntryDelete"] = &instanceServiceProcessorRouteEntryDelete{handler: handler}
	self38.processorMap["AddHostRoute"] = &instanceServiceProcessorAddHostRoute{handler: handler}
	self38.processorMap["AddLocalVmRoute"] = &instanceServiceProcessorAddLocalVmRoute{handler: handler}
	self38.processorMap["AddRemoteVmRoute"] = &instanceServiceProcessorAddRemoteVmRoute{handler: handler}
	self38.processorMap["CreateVrf"] = &instanceServiceProcessorCreateVrf{handler: handler}
	return self38
}

func (p *InstanceServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x39 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x39.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x39

}

type instanceServiceProcessorAddPort struct {
	handler InstanceService
}

func (p *instanceServiceProcessorAddPort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceAddPortArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddPort", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceAddPortResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AddPort(args.PortList); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddPort: "+err2.Error())
		oprot.WriteMessageBegin("AddPort", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("AddPort", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorKeepAliveCheck struct {
	handler InstanceService
}

func (p *instanceServiceProcessorKeepAliveCheck) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceKeepAliveCheckArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("KeepAliveCheck", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceKeepAliveCheckResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.KeepAliveCheck(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing KeepAliveCheck: "+err2.Error())
		oprot.WriteMessageBegin("KeepAliveCheck", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("KeepAliveCheck", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorConnect struct {
	handler InstanceService
}

func (p *instanceServiceProcessorConnect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceConnectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Connect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceConnectResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.Connect(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Connect: "+err2.Error())
		oprot.WriteMessageBegin("Connect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("Connect", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorDeletePort struct {
	handler InstanceService
}

func (p *instanceServiceProcessorDeletePort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceDeletePortArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePort", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceDeletePortResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DeletePort(args.PortID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePort: "+err2.Error())
		oprot.WriteMessageBegin("DeletePort", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePort", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorAddVirtualGateway struct {
	handler InstanceService
}

func (p *instanceServiceProcessorAddVirtualGateway) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceAddVirtualGatewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddVirtualGateway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceAddVirtualGatewayResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AddVirtualGateway(args.VgwList); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddVirtualGateway: "+err2.Error())
		oprot.WriteMessageBegin("AddVirtualGateway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("AddVirtualGateway", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorDeleteVirtualGateway struct {
	handler InstanceService
}

func (p *instanceServiceProcessorDeleteVirtualGateway) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceDeleteVirtualGatewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteVirtualGateway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceDeleteVirtualGatewayResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DeleteVirtualGateway(args.VgwList); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteVirtualGateway: "+err2.Error())
		oprot.WriteMessageBegin("DeleteVirtualGateway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteVirtualGateway", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorConnectForVirtualGateway struct {
	handler InstanceService
}

func (p *instanceServiceProcessorConnectForVirtualGateway) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceConnectForVirtualGatewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ConnectForVirtualGateway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceConnectForVirtualGatewayResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.ConnectForVirtualGateway(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ConnectForVirtualGateway: "+err2.Error())
		oprot.WriteMessageBegin("ConnectForVirtualGateway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ConnectForVirtualGateway", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorAuditTimerForVirtualGateway struct {
	handler InstanceService
}

func (p *instanceServiceProcessorAuditTimerForVirtualGateway) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceAuditTimerForVirtualGatewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AuditTimerForVirtualGateway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceAuditTimerForVirtualGatewayResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AuditTimerForVirtualGateway(args.Timeout); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AuditTimerForVirtualGateway: "+err2.Error())
		oprot.WriteMessageBegin("AuditTimerForVirtualGateway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("AuditTimerForVirtualGateway", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorTunnelNHEntryAdd struct {
	handler InstanceService
}

func (p *instanceServiceProcessorTunnelNHEntryAdd) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceTunnelNHEntryAddArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TunnelNHEntryAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceTunnelNHEntryAddResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.TunnelNHEntryAdd(args.SrcIP, args.DstIP, args.VrfName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TunnelNHEntryAdd: "+err2.Error())
		oprot.WriteMessageBegin("TunnelNHEntryAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("TunnelNHEntryAdd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorTunnelNHEntryDelete struct {
	handler InstanceService
}

func (p *instanceServiceProcessorTunnelNHEntryDelete) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceTunnelNHEntryDeleteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TunnelNHEntryDelete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceTunnelNHEntryDeleteResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.TunnelNHEntryDelete(args.SrcIP, args.DstIP, args.VrfName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TunnelNHEntryDelete: "+err2.Error())
		oprot.WriteMessageBegin("TunnelNHEntryDelete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("TunnelNHEntryDelete", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorRouteEntryAdd struct {
	handler InstanceService
}

func (p *instanceServiceProcessorRouteEntryAdd) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceRouteEntryAddArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RouteEntryAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceRouteEntryAddResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RouteEntryAdd(args.IPAddress, args.GwIP, args.VrfName, args.Label); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RouteEntryAdd: "+err2.Error())
		oprot.WriteMessageBegin("RouteEntryAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("RouteEntryAdd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorRouteEntryDelete struct {
	handler InstanceService
}

func (p *instanceServiceProcessorRouteEntryDelete) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceRouteEntryDeleteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RouteEntryDelete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceRouteEntryDeleteResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RouteEntryDelete(args.IPAddress, args.VrfName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RouteEntryDelete: "+err2.Error())
		oprot.WriteMessageBegin("RouteEntryDelete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("RouteEntryDelete", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorAddHostRoute struct {
	handler InstanceService
}

func (p *instanceServiceProcessorAddHostRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceAddHostRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddHostRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceAddHostRouteResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AddHostRoute(args.IPAddress, args.VrfName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddHostRoute: "+err2.Error())
		oprot.WriteMessageBegin("AddHostRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("AddHostRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorAddLocalVmRoute struct {
	handler InstanceService
}

func (p *instanceServiceProcessorAddLocalVmRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceAddLocalVmRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddLocalVmRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceAddLocalVmRouteResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AddLocalVmRoute(args.IPAddress, args.IntfUUID, args.VrfName, args.Label); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddLocalVmRoute: "+err2.Error())
		oprot.WriteMessageBegin("AddLocalVmRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("AddLocalVmRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorAddRemoteVmRoute struct {
	handler InstanceService
}

func (p *instanceServiceProcessorAddRemoteVmRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceAddRemoteVmRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddRemoteVmRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceAddRemoteVmRouteResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AddRemoteVmRoute(args.IPAddress, args.GwIP, args.VrfName, args.Label); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddRemoteVmRoute: "+err2.Error())
		oprot.WriteMessageBegin("AddRemoteVmRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("AddRemoteVmRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type instanceServiceProcessorCreateVrf struct {
	handler InstanceService
}

func (p *instanceServiceProcessorCreateVrf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InstanceServiceCreateVrfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateVrf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InstanceServiceCreateVrfResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CreateVrf(args.VrfName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateVrf: "+err2.Error())
		oprot.WriteMessageBegin("CreateVrf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("CreateVrf", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - PortList
type InstanceServiceAddPortArgs struct {
	PortList PortList `thrift:"port_list,1,required" json:"port_list"`
}

func NewInstanceServiceAddPortArgs() *InstanceServiceAddPortArgs {
	return &InstanceServiceAddPortArgs{}
}

func (p *InstanceServiceAddPortArgs) GetPortList() PortList {
	return p.PortList
}
func (p *InstanceServiceAddPortArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPortList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPortList = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPortList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PortList is not set"))
	}
	return nil
}

func (p *InstanceServiceAddPortArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(PortList, 0, size)
	p.PortList = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &Port{}
		if err := _elem40.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.PortList = append(p.PortList, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InstanceServiceAddPortArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddPort_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddPortArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port_list", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:port_list: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PortList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PortList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:port_list: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddPortArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddPortArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceAddPortResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceAddPortResult() *InstanceServiceAddPortResult {
	return &InstanceServiceAddPortResult{}
}

var InstanceServiceAddPortResult_Success_DEFAULT bool

func (p *InstanceServiceAddPortResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceAddPortResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceAddPortResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceAddPortResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceAddPortResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceAddPortResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddPort_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddPortResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceAddPortResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddPortResult(%+v)", *p)
}

type InstanceServiceKeepAliveCheckArgs struct {
}

func NewInstanceServiceKeepAliveCheckArgs() *InstanceServiceKeepAliveCheckArgs {
	return &InstanceServiceKeepAliveCheckArgs{}
}

func (p *InstanceServiceKeepAliveCheckArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceKeepAliveCheckArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KeepAliveCheck_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceKeepAliveCheckArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceKeepAliveCheckArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceKeepAliveCheckResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceKeepAliveCheckResult() *InstanceServiceKeepAliveCheckResult {
	return &InstanceServiceKeepAliveCheckResult{}
}

var InstanceServiceKeepAliveCheckResult_Success_DEFAULT bool

func (p *InstanceServiceKeepAliveCheckResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceKeepAliveCheckResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceKeepAliveCheckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceKeepAliveCheckResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceKeepAliveCheckResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceKeepAliveCheckResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KeepAliveCheck_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceKeepAliveCheckResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceKeepAliveCheckResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceKeepAliveCheckResult(%+v)", *p)
}

type InstanceServiceConnectArgs struct {
}

func NewInstanceServiceConnectArgs() *InstanceServiceConnectArgs {
	return &InstanceServiceConnectArgs{}
}

func (p *InstanceServiceConnectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceConnectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Connect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceConnectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceConnectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceConnectResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceConnectResult() *InstanceServiceConnectResult {
	return &InstanceServiceConnectResult{}
}

var InstanceServiceConnectResult_Success_DEFAULT bool

func (p *InstanceServiceConnectResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceConnectResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceConnectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceConnectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceConnectResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceConnectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Connect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceConnectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceConnectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceConnectResult(%+v)", *p)
}

// Attributes:
//  - PortID
type InstanceServiceDeletePortArgs struct {
	PortID Tuuid `thrift:"port_id,1,required" json:"port_id"`
}

func NewInstanceServiceDeletePortArgs() *InstanceServiceDeletePortArgs {
	return &InstanceServiceDeletePortArgs{}
}

func (p *InstanceServiceDeletePortArgs) GetPortID() Tuuid {
	return p.PortID
}
func (p *InstanceServiceDeletePortArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPortID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPortID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPortID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PortID is not set"))
	}
	return nil
}

func (p *InstanceServiceDeletePortArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(Tuuid, 0, size)
	p.PortID = tSlice
	for i := 0; i < size; i++ {
		var _elem41 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem41 = v
		}
		p.PortID = append(p.PortID, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InstanceServiceDeletePortArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeletePort_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceDeletePortArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port_id", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:port_id: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I16, len(p.PortID)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PortID {
		if err := oprot.WriteI16(int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:port_id: ", p), err)
	}
	return err
}

func (p *InstanceServiceDeletePortArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceDeletePortArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceDeletePortResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceDeletePortResult() *InstanceServiceDeletePortResult {
	return &InstanceServiceDeletePortResult{}
}

var InstanceServiceDeletePortResult_Success_DEFAULT bool

func (p *InstanceServiceDeletePortResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceDeletePortResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceDeletePortResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceDeletePortResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceDeletePortResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceDeletePortResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeletePort_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceDeletePortResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceDeletePortResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceDeletePortResult(%+v)", *p)
}

// Attributes:
//  - VgwList
type InstanceServiceAddVirtualGatewayArgs struct {
	VgwList VirtualGatewayRequestList `thrift:"vgw_list,1,required" json:"vgw_list"`
}

func NewInstanceServiceAddVirtualGatewayArgs() *InstanceServiceAddVirtualGatewayArgs {
	return &InstanceServiceAddVirtualGatewayArgs{}
}

func (p *InstanceServiceAddVirtualGatewayArgs) GetVgwList() VirtualGatewayRequestList {
	return p.VgwList
}
func (p *InstanceServiceAddVirtualGatewayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVgwList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetVgwList = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVgwList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VgwList is not set"))
	}
	return nil
}

func (p *InstanceServiceAddVirtualGatewayArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(VirtualGatewayRequestList, 0, size)
	p.VgwList = tSlice
	for i := 0; i < size; i++ {
		_elem42 := &VirtualGatewayRequest{}
		if err := _elem42.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
		}
		p.VgwList = append(p.VgwList, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InstanceServiceAddVirtualGatewayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddVirtualGateway_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddVirtualGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vgw_list", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vgw_list: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VgwList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VgwList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vgw_list: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddVirtualGatewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddVirtualGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceAddVirtualGatewayResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceAddVirtualGatewayResult() *InstanceServiceAddVirtualGatewayResult {
	return &InstanceServiceAddVirtualGatewayResult{}
}

var InstanceServiceAddVirtualGatewayResult_Success_DEFAULT bool

func (p *InstanceServiceAddVirtualGatewayResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceAddVirtualGatewayResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceAddVirtualGatewayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceAddVirtualGatewayResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceAddVirtualGatewayResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceAddVirtualGatewayResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddVirtualGateway_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddVirtualGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceAddVirtualGatewayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddVirtualGatewayResult(%+v)", *p)
}

// Attributes:
//  - VgwList
type InstanceServiceDeleteVirtualGatewayArgs struct {
	VgwList []string `thrift:"vgw_list,1,required" json:"vgw_list"`
}

func NewInstanceServiceDeleteVirtualGatewayArgs() *InstanceServiceDeleteVirtualGatewayArgs {
	return &InstanceServiceDeleteVirtualGatewayArgs{}
}

func (p *InstanceServiceDeleteVirtualGatewayArgs) GetVgwList() []string {
	return p.VgwList
}
func (p *InstanceServiceDeleteVirtualGatewayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVgwList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetVgwList = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVgwList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VgwList is not set"))
	}
	return nil
}

func (p *InstanceServiceDeleteVirtualGatewayArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.VgwList = tSlice
	for i := 0; i < size; i++ {
		var _elem43 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem43 = v
		}
		p.VgwList = append(p.VgwList, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InstanceServiceDeleteVirtualGatewayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteVirtualGateway_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceDeleteVirtualGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vgw_list", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vgw_list: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VgwList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VgwList {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vgw_list: ", p), err)
	}
	return err
}

func (p *InstanceServiceDeleteVirtualGatewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceDeleteVirtualGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceDeleteVirtualGatewayResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceDeleteVirtualGatewayResult() *InstanceServiceDeleteVirtualGatewayResult {
	return &InstanceServiceDeleteVirtualGatewayResult{}
}

var InstanceServiceDeleteVirtualGatewayResult_Success_DEFAULT bool

func (p *InstanceServiceDeleteVirtualGatewayResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceDeleteVirtualGatewayResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceDeleteVirtualGatewayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceDeleteVirtualGatewayResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceDeleteVirtualGatewayResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceDeleteVirtualGatewayResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteVirtualGateway_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceDeleteVirtualGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceDeleteVirtualGatewayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceDeleteVirtualGatewayResult(%+v)", *p)
}

type InstanceServiceConnectForVirtualGatewayArgs struct {
}

func NewInstanceServiceConnectForVirtualGatewayArgs() *InstanceServiceConnectForVirtualGatewayArgs {
	return &InstanceServiceConnectForVirtualGatewayArgs{}
}

func (p *InstanceServiceConnectForVirtualGatewayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceConnectForVirtualGatewayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConnectForVirtualGateway_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceConnectForVirtualGatewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceConnectForVirtualGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceConnectForVirtualGatewayResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceConnectForVirtualGatewayResult() *InstanceServiceConnectForVirtualGatewayResult {
	return &InstanceServiceConnectForVirtualGatewayResult{}
}

var InstanceServiceConnectForVirtualGatewayResult_Success_DEFAULT bool

func (p *InstanceServiceConnectForVirtualGatewayResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceConnectForVirtualGatewayResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceConnectForVirtualGatewayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceConnectForVirtualGatewayResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceConnectForVirtualGatewayResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceConnectForVirtualGatewayResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConnectForVirtualGateway_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceConnectForVirtualGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceConnectForVirtualGatewayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceConnectForVirtualGatewayResult(%+v)", *p)
}

// Attributes:
//  - Timeout
type InstanceServiceAuditTimerForVirtualGatewayArgs struct {
	Timeout int32 `thrift:"timeout,1,required" json:"timeout"`
}

func NewInstanceServiceAuditTimerForVirtualGatewayArgs() *InstanceServiceAuditTimerForVirtualGatewayArgs {
	return &InstanceServiceAuditTimerForVirtualGatewayArgs{}
}

func (p *InstanceServiceAuditTimerForVirtualGatewayArgs) GetTimeout() int32 {
	return p.Timeout
}
func (p *InstanceServiceAuditTimerForVirtualGatewayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTimeout bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetTimeout = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTimeout {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timeout is not set"))
	}
	return nil
}

func (p *InstanceServiceAuditTimerForVirtualGatewayArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Timeout = v
	}
	return nil
}

func (p *InstanceServiceAuditTimerForVirtualGatewayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuditTimerForVirtualGateway_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAuditTimerForVirtualGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timeout", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeout: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Timeout)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeout (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeout: ", p), err)
	}
	return err
}

func (p *InstanceServiceAuditTimerForVirtualGatewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAuditTimerForVirtualGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceAuditTimerForVirtualGatewayResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceAuditTimerForVirtualGatewayResult() *InstanceServiceAuditTimerForVirtualGatewayResult {
	return &InstanceServiceAuditTimerForVirtualGatewayResult{}
}

var InstanceServiceAuditTimerForVirtualGatewayResult_Success_DEFAULT bool

func (p *InstanceServiceAuditTimerForVirtualGatewayResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceAuditTimerForVirtualGatewayResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceAuditTimerForVirtualGatewayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceAuditTimerForVirtualGatewayResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceAuditTimerForVirtualGatewayResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceAuditTimerForVirtualGatewayResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuditTimerForVirtualGateway_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAuditTimerForVirtualGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceAuditTimerForVirtualGatewayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAuditTimerForVirtualGatewayResult(%+v)", *p)
}

// Attributes:
//  - SrcIP
//  - DstIP
//  - VrfName
type InstanceServiceTunnelNHEntryAddArgs struct {
	SrcIP   string `thrift:"src_ip,1,required" json:"src_ip"`
	DstIP   string `thrift:"dst_ip,2,required" json:"dst_ip"`
	VrfName string `thrift:"vrf_name,3" json:"vrf_name"`
}

func NewInstanceServiceTunnelNHEntryAddArgs() *InstanceServiceTunnelNHEntryAddArgs {
	return &InstanceServiceTunnelNHEntryAddArgs{}
}

func (p *InstanceServiceTunnelNHEntryAddArgs) GetSrcIP() string {
	return p.SrcIP
}

func (p *InstanceServiceTunnelNHEntryAddArgs) GetDstIP() string {
	return p.DstIP
}

func (p *InstanceServiceTunnelNHEntryAddArgs) GetVrfName() string {
	return p.VrfName
}
func (p *InstanceServiceTunnelNHEntryAddArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSrcIP bool = false
	var issetDstIP bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetSrcIP = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetDstIP = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSrcIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SrcIP is not set"))
	}
	if !issetDstIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DstIP is not set"))
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryAddArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SrcIP = v
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryAddArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DstIP = v
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryAddArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VrfName = v
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryAddArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TunnelNHEntryAdd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("src_ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.SrcIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.src_ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src_ip: ", p), err)
	}
	return err
}

func (p *InstanceServiceTunnelNHEntryAddArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dst_ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dst_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.DstIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dst_ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dst_ip: ", p), err)
	}
	return err
}

func (p *InstanceServiceTunnelNHEntryAddArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vrf_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vrf_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VrfName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vrf_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vrf_name: ", p), err)
	}
	return err
}

func (p *InstanceServiceTunnelNHEntryAddArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceTunnelNHEntryAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceTunnelNHEntryAddResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceTunnelNHEntryAddResult() *InstanceServiceTunnelNHEntryAddResult {
	return &InstanceServiceTunnelNHEntryAddResult{}
}

var InstanceServiceTunnelNHEntryAddResult_Success_DEFAULT bool

func (p *InstanceServiceTunnelNHEntryAddResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceTunnelNHEntryAddResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceTunnelNHEntryAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceTunnelNHEntryAddResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryAddResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryAddResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TunnelNHEntryAdd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryAddResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceTunnelNHEntryAddResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceTunnelNHEntryAddResult(%+v)", *p)
}

// Attributes:
//  - SrcIP
//  - DstIP
//  - VrfName
type InstanceServiceTunnelNHEntryDeleteArgs struct {
	SrcIP   string `thrift:"src_ip,1,required" json:"src_ip"`
	DstIP   string `thrift:"dst_ip,2,required" json:"dst_ip"`
	VrfName string `thrift:"vrf_name,3" json:"vrf_name"`
}

func NewInstanceServiceTunnelNHEntryDeleteArgs() *InstanceServiceTunnelNHEntryDeleteArgs {
	return &InstanceServiceTunnelNHEntryDeleteArgs{}
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) GetSrcIP() string {
	return p.SrcIP
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) GetDstIP() string {
	return p.DstIP
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) GetVrfName() string {
	return p.VrfName
}
func (p *InstanceServiceTunnelNHEntryDeleteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSrcIP bool = false
	var issetDstIP bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetSrcIP = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetDstIP = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSrcIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SrcIP is not set"))
	}
	if !issetDstIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DstIP is not set"))
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SrcIP = v
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DstIP = v
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VrfName = v
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TunnelNHEntryDelete_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("src_ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.SrcIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.src_ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src_ip: ", p), err)
	}
	return err
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dst_ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dst_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.DstIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dst_ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dst_ip: ", p), err)
	}
	return err
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vrf_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vrf_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VrfName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vrf_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vrf_name: ", p), err)
	}
	return err
}

func (p *InstanceServiceTunnelNHEntryDeleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceTunnelNHEntryDeleteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceTunnelNHEntryDeleteResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceTunnelNHEntryDeleteResult() *InstanceServiceTunnelNHEntryDeleteResult {
	return &InstanceServiceTunnelNHEntryDeleteResult{}
}

var InstanceServiceTunnelNHEntryDeleteResult_Success_DEFAULT bool

func (p *InstanceServiceTunnelNHEntryDeleteResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceTunnelNHEntryDeleteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceTunnelNHEntryDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceTunnelNHEntryDeleteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryDeleteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryDeleteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TunnelNHEntryDelete_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceTunnelNHEntryDeleteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceTunnelNHEntryDeleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceTunnelNHEntryDeleteResult(%+v)", *p)
}

// Attributes:
//  - IPAddress
//  - GwIP
//  - VrfName
//  - Label
type InstanceServiceRouteEntryAddArgs struct {
	IPAddress string `thrift:"ip_address,1,required" json:"ip_address"`
	GwIP      string `thrift:"gw_ip,2,required" json:"gw_ip"`
	VrfName   string `thrift:"vrf_name,3" json:"vrf_name"`
	Label     string `thrift:"label,4" json:"label"`
}

func NewInstanceServiceRouteEntryAddArgs() *InstanceServiceRouteEntryAddArgs {
	return &InstanceServiceRouteEntryAddArgs{}
}

func (p *InstanceServiceRouteEntryAddArgs) GetIPAddress() string {
	return p.IPAddress
}

func (p *InstanceServiceRouteEntryAddArgs) GetGwIP() string {
	return p.GwIP
}

func (p *InstanceServiceRouteEntryAddArgs) GetVrfName() string {
	return p.VrfName
}

func (p *InstanceServiceRouteEntryAddArgs) GetLabel() string {
	return p.Label
}
func (p *InstanceServiceRouteEntryAddArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIPAddress bool = false
	var issetGwIP bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetIPAddress = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetGwIP = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIPAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IPAddress is not set"))
	}
	if !issetGwIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GwIP is not set"))
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IPAddress = v
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GwIP = v
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VrfName = v
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RouteEntryAdd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip_address", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip_address: ", p), err)
	}
	if err := oprot.WriteString(string(p.IPAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip_address (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip_address: ", p), err)
	}
	return err
}

func (p *InstanceServiceRouteEntryAddArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gw_ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gw_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.GwIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gw_ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gw_ip: ", p), err)
	}
	return err
}

func (p *InstanceServiceRouteEntryAddArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vrf_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vrf_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VrfName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vrf_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vrf_name: ", p), err)
	}
	return err
}

func (p *InstanceServiceRouteEntryAddArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:label: ", p), err)
	}
	if err := oprot.WriteString(string(p.Label)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.label (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:label: ", p), err)
	}
	return err
}

func (p *InstanceServiceRouteEntryAddArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceRouteEntryAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceRouteEntryAddResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceRouteEntryAddResult() *InstanceServiceRouteEntryAddResult {
	return &InstanceServiceRouteEntryAddResult{}
}

var InstanceServiceRouteEntryAddResult_Success_DEFAULT bool

func (p *InstanceServiceRouteEntryAddResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceRouteEntryAddResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceRouteEntryAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceRouteEntryAddResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RouteEntryAdd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceRouteEntryAddResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceRouteEntryAddResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceRouteEntryAddResult(%+v)", *p)
}

// Attributes:
//  - IPAddress
//  - VrfName
type InstanceServiceRouteEntryDeleteArgs struct {
	IPAddress string `thrift:"ip_address,1,required" json:"ip_address"`
	VrfName   string `thrift:"vrf_name,2,required" json:"vrf_name"`
}

func NewInstanceServiceRouteEntryDeleteArgs() *InstanceServiceRouteEntryDeleteArgs {
	return &InstanceServiceRouteEntryDeleteArgs{}
}

func (p *InstanceServiceRouteEntryDeleteArgs) GetIPAddress() string {
	return p.IPAddress
}

func (p *InstanceServiceRouteEntryDeleteArgs) GetVrfName() string {
	return p.VrfName
}
func (p *InstanceServiceRouteEntryDeleteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIPAddress bool = false
	var issetVrfName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetIPAddress = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetVrfName = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIPAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IPAddress is not set"))
	}
	if !issetVrfName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VrfName is not set"))
	}
	return nil
}

func (p *InstanceServiceRouteEntryDeleteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IPAddress = v
	}
	return nil
}

func (p *InstanceServiceRouteEntryDeleteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VrfName = v
	}
	return nil
}

func (p *InstanceServiceRouteEntryDeleteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RouteEntryDelete_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceRouteEntryDeleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip_address", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip_address: ", p), err)
	}
	if err := oprot.WriteString(string(p.IPAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip_address (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip_address: ", p), err)
	}
	return err
}

func (p *InstanceServiceRouteEntryDeleteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vrf_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vrf_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VrfName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vrf_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vrf_name: ", p), err)
	}
	return err
}

func (p *InstanceServiceRouteEntryDeleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceRouteEntryDeleteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceRouteEntryDeleteResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceRouteEntryDeleteResult() *InstanceServiceRouteEntryDeleteResult {
	return &InstanceServiceRouteEntryDeleteResult{}
}

var InstanceServiceRouteEntryDeleteResult_Success_DEFAULT bool

func (p *InstanceServiceRouteEntryDeleteResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceRouteEntryDeleteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceRouteEntryDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceRouteEntryDeleteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceRouteEntryDeleteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceRouteEntryDeleteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RouteEntryDelete_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceRouteEntryDeleteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceRouteEntryDeleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceRouteEntryDeleteResult(%+v)", *p)
}

// Attributes:
//  - IPAddress
//  - VrfName
type InstanceServiceAddHostRouteArgs struct {
	IPAddress string `thrift:"ip_address,1,required" json:"ip_address"`
	VrfName   string `thrift:"vrf_name,2" json:"vrf_name"`
}

func NewInstanceServiceAddHostRouteArgs() *InstanceServiceAddHostRouteArgs {
	return &InstanceServiceAddHostRouteArgs{}
}

func (p *InstanceServiceAddHostRouteArgs) GetIPAddress() string {
	return p.IPAddress
}

func (p *InstanceServiceAddHostRouteArgs) GetVrfName() string {
	return p.VrfName
}
func (p *InstanceServiceAddHostRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIPAddress bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetIPAddress = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIPAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IPAddress is not set"))
	}
	return nil
}

func (p *InstanceServiceAddHostRouteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IPAddress = v
	}
	return nil
}

func (p *InstanceServiceAddHostRouteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VrfName = v
	}
	return nil
}

func (p *InstanceServiceAddHostRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddHostRoute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddHostRouteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip_address", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip_address: ", p), err)
	}
	if err := oprot.WriteString(string(p.IPAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip_address (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip_address: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddHostRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vrf_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vrf_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VrfName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vrf_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vrf_name: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddHostRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddHostRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceAddHostRouteResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceAddHostRouteResult() *InstanceServiceAddHostRouteResult {
	return &InstanceServiceAddHostRouteResult{}
}

var InstanceServiceAddHostRouteResult_Success_DEFAULT bool

func (p *InstanceServiceAddHostRouteResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceAddHostRouteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceAddHostRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceAddHostRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceAddHostRouteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceAddHostRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddHostRoute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddHostRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceAddHostRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddHostRouteResult(%+v)", *p)
}

// Attributes:
//  - IPAddress
//  - IntfUUID
//  - VrfName
//  - Label
type InstanceServiceAddLocalVmRouteArgs struct {
	IPAddress string `thrift:"ip_address,1,required" json:"ip_address"`
	IntfUUID  string `thrift:"intf_uuid,2,required" json:"intf_uuid"`
	VrfName   string `thrift:"vrf_name,3" json:"vrf_name"`
	Label     string `thrift:"label,4" json:"label"`
}

func NewInstanceServiceAddLocalVmRouteArgs() *InstanceServiceAddLocalVmRouteArgs {
	return &InstanceServiceAddLocalVmRouteArgs{}
}

func (p *InstanceServiceAddLocalVmRouteArgs) GetIPAddress() string {
	return p.IPAddress
}

func (p *InstanceServiceAddLocalVmRouteArgs) GetIntfUUID() string {
	return p.IntfUUID
}

func (p *InstanceServiceAddLocalVmRouteArgs) GetVrfName() string {
	return p.VrfName
}

func (p *InstanceServiceAddLocalVmRouteArgs) GetLabel() string {
	return p.Label
}
func (p *InstanceServiceAddLocalVmRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIPAddress bool = false
	var issetIntfUUID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetIPAddress = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetIntfUUID = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIPAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IPAddress is not set"))
	}
	if !issetIntfUUID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IntfUUID is not set"))
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IPAddress = v
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IntfUUID = v
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VrfName = v
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddLocalVmRoute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip_address", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip_address: ", p), err)
	}
	if err := oprot.WriteString(string(p.IPAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip_address (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip_address: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddLocalVmRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("intf_uuid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:intf_uuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.IntfUUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.intf_uuid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:intf_uuid: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddLocalVmRouteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vrf_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vrf_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VrfName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vrf_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vrf_name: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddLocalVmRouteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:label: ", p), err)
	}
	if err := oprot.WriteString(string(p.Label)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.label (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:label: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddLocalVmRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddLocalVmRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceAddLocalVmRouteResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceAddLocalVmRouteResult() *InstanceServiceAddLocalVmRouteResult {
	return &InstanceServiceAddLocalVmRouteResult{}
}

var InstanceServiceAddLocalVmRouteResult_Success_DEFAULT bool

func (p *InstanceServiceAddLocalVmRouteResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceAddLocalVmRouteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceAddLocalVmRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceAddLocalVmRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddLocalVmRoute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddLocalVmRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceAddLocalVmRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddLocalVmRouteResult(%+v)", *p)
}

// Attributes:
//  - IPAddress
//  - GwIP
//  - VrfName
//  - Label
type InstanceServiceAddRemoteVmRouteArgs struct {
	IPAddress string `thrift:"ip_address,1,required" json:"ip_address"`
	GwIP      string `thrift:"gw_ip,2,required" json:"gw_ip"`
	VrfName   string `thrift:"vrf_name,3" json:"vrf_name"`
	Label     string `thrift:"label,4" json:"label"`
}

func NewInstanceServiceAddRemoteVmRouteArgs() *InstanceServiceAddRemoteVmRouteArgs {
	return &InstanceServiceAddRemoteVmRouteArgs{}
}

func (p *InstanceServiceAddRemoteVmRouteArgs) GetIPAddress() string {
	return p.IPAddress
}

func (p *InstanceServiceAddRemoteVmRouteArgs) GetGwIP() string {
	return p.GwIP
}

func (p *InstanceServiceAddRemoteVmRouteArgs) GetVrfName() string {
	return p.VrfName
}

func (p *InstanceServiceAddRemoteVmRouteArgs) GetLabel() string {
	return p.Label
}
func (p *InstanceServiceAddRemoteVmRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIPAddress bool = false
	var issetGwIP bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetIPAddress = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetGwIP = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIPAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IPAddress is not set"))
	}
	if !issetGwIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GwIP is not set"))
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IPAddress = v
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GwIP = v
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VrfName = v
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddRemoteVmRoute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip_address", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip_address: ", p), err)
	}
	if err := oprot.WriteString(string(p.IPAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip_address (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip_address: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddRemoteVmRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gw_ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gw_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.GwIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gw_ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gw_ip: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddRemoteVmRouteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vrf_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vrf_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VrfName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vrf_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vrf_name: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddRemoteVmRouteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:label: ", p), err)
	}
	if err := oprot.WriteString(string(p.Label)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.label (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:label: ", p), err)
	}
	return err
}

func (p *InstanceServiceAddRemoteVmRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddRemoteVmRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceAddRemoteVmRouteResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceAddRemoteVmRouteResult() *InstanceServiceAddRemoteVmRouteResult {
	return &InstanceServiceAddRemoteVmRouteResult{}
}

var InstanceServiceAddRemoteVmRouteResult_Success_DEFAULT bool

func (p *InstanceServiceAddRemoteVmRouteResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceAddRemoteVmRouteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceAddRemoteVmRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceAddRemoteVmRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddRemoteVmRoute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceAddRemoteVmRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceAddRemoteVmRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceAddRemoteVmRouteResult(%+v)", *p)
}

// Attributes:
//  - VrfName
type InstanceServiceCreateVrfArgs struct {
	VrfName string `thrift:"vrf_name,1,required" json:"vrf_name"`
}

func NewInstanceServiceCreateVrfArgs() *InstanceServiceCreateVrfArgs {
	return &InstanceServiceCreateVrfArgs{}
}

func (p *InstanceServiceCreateVrfArgs) GetVrfName() string {
	return p.VrfName
}
func (p *InstanceServiceCreateVrfArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVrfName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetVrfName = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVrfName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VrfName is not set"))
	}
	return nil
}

func (p *InstanceServiceCreateVrfArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.VrfName = v
	}
	return nil
}

func (p *InstanceServiceCreateVrfArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateVrf_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceCreateVrfArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vrf_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vrf_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VrfName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vrf_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vrf_name: ", p), err)
	}
	return err
}

func (p *InstanceServiceCreateVrfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceCreateVrfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InstanceServiceCreateVrfResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewInstanceServiceCreateVrfResult() *InstanceServiceCreateVrfResult {
	return &InstanceServiceCreateVrfResult{}
}

var InstanceServiceCreateVrfResult_Success_DEFAULT bool

func (p *InstanceServiceCreateVrfResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return InstanceServiceCreateVrfResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *InstanceServiceCreateVrfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InstanceServiceCreateVrfResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstanceServiceCreateVrfResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *InstanceServiceCreateVrfResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateVrf_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstanceServiceCreateVrfResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *InstanceServiceCreateVrfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceServiceCreateVrfResult(%+v)", *p)
}
